"use strict";
var __moduleName = "demoexample";
function highlight(element) {
  Prism.highlightElement(element);
}
function escape(string) {
  return string.replace(/\&/g, '&amp;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
}
function logging_function() {
  var $__5;
  for (var msgs = [],
      $__3 = 0; $__3 < arguments.length; $__3++)
    msgs[$__3] = arguments[$__3];
  ($__5 = console).log.apply($__5, $traceurRuntime.toObject(msgs));
  var sandbox = document.getElementById(this.dataset.sandbox);
  if (!sandbox)
    return false;
  for (var $__1 = msgs[Symbol.iterator](),
      $__2; !($__2 = $__1.next()).done; ) {
    try {
      throw undefined;
    } catch (m) {
      m = $__2.value;
      {
        switch (typeof m) {
          case 'object':
            if ("nodeName" in m) {
              sandbox.appendChild(m);
              break;
            }
            m = JSON.stringify(m).replace(/(\:|\,|\{|\[)/g, '$1 ').replace(/(\]|\})/g, ' $1');
          default:
            sandbox.insertAdjacentHTML('beforeend', Prism.highlight(m + " ", Prism.languages.javascript));
        }
      }
    }
  }
  sandbox.appendChild(document.createTextNode("\n"));
}
function linkify(string) {
  return string.replace(/\[([^\]]+)\]\(([^\)]+)\)/g, (function() {
    for (var rx = [],
        $__4 = 0; $__4 < arguments.length; $__4++)
      rx[$__4] = arguments[$__4];
    return '<a href="' + rx[2] + '">' + rx[1] + '</a>';
  }));
}
var DemoExample = function DemoExample() {};
($traceurRuntime.createClass)(DemoExample, {
  render: function(frame) {
    this.frame = frame;
  },
  addText: function(contents) {
    if (!this.frame)
      return console.error(this, 'Not assigned to render element.');
    console.log("Text: ", contents);
    var e = document.createElement('p');
    e.innerHTML = linkify(contents);
    this.frame.appendChild(e);
  },
  addDemo: function(source) {
    var type = arguments[1] !== (void 0) ? arguments[1] : "markup";
    if (!this.frame)
      return console.error(this, 'Not assigned to render element.');
    console.log("Demo: ", type, source);
    var e = document.createElement('pre'),
        code = document.createElement('code');
    code.className = 'language-' + type;
    code.innerHTML = escape(source);
    e.appendChild(code);
    this.frame.appendChild(e);
    highlight(code);
  },
  addDemoCode: function(source, exec) {
    if (!this.frame)
      return console.error(this, 'Not assigned to render element.');
    console.log("Code: ", source, exec);
    var e = document.createElement('pre'),
        code = document.createElement('code');
    code.className = "language-javascript";
    code.innerHTML = escape(source);
    e.appendChild(code);
    this.frame.appendChild(e);
    highlight(code);
    var sbid = 'sandbox_' + (new Date()).getTime();
    var sandbox = document.createElement('pre');
    sandbox.id = sbid;
    sandbox.className = 'sandbox language-clike';
    var launchbtn = document.createElement('button');
    launchbtn.textContent = "Start";
    launchbtn.dataset.sandbox = sbid;
    launchbtn.addEventListener('click', (function(e) {
      var btn = e.target;
      if (!btn.dataset.started) {
        btn.dataset.started = 'started';
        btn.textContent = "Reset";
        exec({log: logging_function.bind(btn)});
      } else {
        btn.dataset.started = '';
        btn.textContent = "Start";
        document.getElementById(btn.dataset.sandbox).innerHTML = '';
      }
    }));
    this.frame.appendChild(sandbox);
    this.frame.appendChild(launchbtn);
  }
}, {});
module.exports = {
  get DemoExample() {
    return DemoExample;
  },
  __esModule: true
};
